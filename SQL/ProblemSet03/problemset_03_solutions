1.
Find the titles of all movies directed by Steven Spielberg. (1 point possible)

select title from movie where director = 'Steven Spielberg';
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2.
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

select distinct(m.title),m.year,r.stars from movie m join rating r on m.mid = r.mid where stars in(4,5) order by m.year;
+-------------------------+------+-------+
| title                   | year | stars |
+-------------------------+------+-------+
| Snow White              | 1937 |     4 |
| Snow White              | 1937 |     5 |
| Gone with the Wind      | 1939 |     4 |
| Raiders of the Lost Ark | 1981 |     4 |
| Avatar                  | 2009 |     5 |
+-------------------------+------+-------+
3.
Find the titles of all movies that have no ratings. (1 point possible)

select title from movie where mid not in(select mid from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
			------------------
select m.title,r.mid from movie m left join rating r on r.mid =m.mid where r.mid is null;
+-----------+------+
| title     | mid  |
+-----------+------+
| Star Wars | NULL |
| Titanic   | NULL |
+-----------+------+
4.
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)
select r.name from reviewer r join Rating ra on r.rid = ra.rid where ratingDate is null;

+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
5.
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

 select r.name,m.title,ra.stars,ra.ratingDate from movie m join rating ra on m.mid = ra.mid join reviewer r on r.rid = ra.rid order by r.name ,m.title ,ra.stars;
+------------------+-------------------------+-------+------------+
| name             | title                   | stars | ratingDate |
+------------------+-------------------------+-------+------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02 |
| Brittany Harris  | Raiders of the Lost Ark |     2 | 2011-01-30 |
| Brittany Harris  | Raiders of the Lost Ark |     4 | 2011-01-12 |
| Brittany Harris  | The Sound of Music      |     2 | 2011-01-20 |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22 |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL       |
| Chris Jackson    | The Sound of Music      |     3 | 2011-01-27 |
| Daniel Lewis     | Snow White              |     4 | NULL       |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15 |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19 |
| James Cameron    | Avatar                  |     5 | 2011-01-20 |
| Mike Anderson    | Gone with the Wind      |     3 | 2011-01-09 |
| Sarah Martinez   | Gone with the Wind      |     2 | 2011-01-22 |
| Sarah Martinez   | Gone with the Wind      |     4 | 2011-01-27 |
+------------------+-------------------------+-------+------------+
6.
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

select ri.name,r.rid,m.title from rating r join movie m on m.mid = r.mid join rating r1 on r.rid = r1.rid join reviewer ri on ri.rid = r1.rid where r.ratingdate > r1.ratingdate and r.stars > r1.stars;
+------------------+------+--------------------+
| name             | rid  | title              |
+------------------+------+--------------------+
| Sarah Martinez   |  201 | Gone with the Wind |
| Chris Jackson    |  205 | The Sound of Music |
| Elizabeth Thomas |  206 | Snow White         |
+------------------+------+--------------------+
7.
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

 select m.title,max(r.stars) from rating r join movie m on r.mid = m.mid group by (m.title) order by m.title;
+-------------------------+--------------+
| title                   | max(r.stars) |
+-------------------------+--------------+
| Avatar                  |            5 |
| E.T.                    |            3 |
| Gone with the Wind      |            4 |
| Raiders of the Lost Ark |            4 |
| Snow White              |            5 |
| The Sound of Music      |            3 |
+-------------------------+--------------+
8.
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

select m.title,max(r.stars)-min(r.stars) as 'rating spread' from rating r join movie m on m.mid = r.mid group by title;
+-------------------------+---------------+
| title                   | rating spread |
+-------------------------+---------------+
| Gone with the Wind      |             2 |
| Snow White              |             1 |
| The Sound of Music      |             1 |
| Raiders of the Lost Ark |             2 |
| E.T.                    |             1 |
| Avatar                  |             2 |
+-------------------------+---------------+
9.
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)

  select 
   (select avg(a.av1) from 
      (select ra.mID,m.year,avg(ra.stars) as av1 from rating ra join movie m on ra.mID = m.mID group by ra.mID )as a where a.year<1980)
   - 
   (select avg(b.av2) from 
      (select ra.mID,m.year,avg(ra.stars) as av2 from rating ra join movie m on ra.mID = m.mID group by ra.mID) as b where b.year>1980);

+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| (select avg(a.av1) from
      (select ra.mID,m.year,avg(ra.stars) as av1 from rating ra join movie m on ra.mID = m.mID group by ra.mID )as a where a.year<1980)
   -
   (select avg(b.av2) from
      (select ra.mID,m.year,avg(ra.stars) as av2 from rating |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                                                                                                      0.05556667 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

10.
Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

select distinct(r.name) from reviewer r join rating ra on r.rid = ra.rid join movie m on m.mid = ra.mid where m.title = 'Gone with the Wind';
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
11.
For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

select r.name,m.title,ra.stars from reviewer r join rating ra on r.rid = ra.rid join movie m on ra.mid = m.mid where r.name = m.director;
+---------------+--------+-------+
| name          | title  | stars |
+---------------+--------+-------+
| James Cameron | Avatar |     5 |
+---------------+--------+-------+
12.
Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

select distinct(r.name),m.title from reviewer r join rating ra on r.rid = ra.rid join movie m on ra.mid = m.mid order by r.name,m.title;
+------------------+-------------------------+
| name             | title                   |
+------------------+-------------------------+
| Ashley White     | E.T.                    |
| Brittany Harris  | Raiders of the Lost Ark |
| Brittany Harris  | The Sound of Music      |
| Chris Jackson    | E.T.                    |
| Chris Jackson    | Raiders of the Lost Ark |
| Chris Jackson    | The Sound of Music      |
| Daniel Lewis     | Snow White              |
| Elizabeth Thomas | Avatar                  |
| Elizabeth Thomas | Snow White              |
| James Cameron    | Avatar                  |
| Mike Anderson    | Gone with the Wind      |
| Sarah Martinez   | Gone with the Wind      |
+------------------+-------------------------+
13.
Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

 select title from movie where mid not in(select ra.mid title from reviewer r join rating ra on r.rid = ra.rid join movie m on m.mid = ra.mid where name = 'Chris Jackson');
+--------------------+
| title              |
+--------------------+
| Gone with the Wind |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
14.
For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

select m.mid,m.title,r.rid,r.name from movie m join rating ra on m.mid = ra.mid join reviewer r on  r.rid = ra.rid group by ra.rid,ra.mid order by mid;
+-----+-------------------------+-----+------------------+
| mid | title                   | rid | name             |
+-----+-------------------------+-----+------------------+
| 101 | Gone with the Wind      | 201 | Sarah Martinez   |
| 101 | Gone with the Wind      | 204 | Mike Anderson    |
| 103 | The Sound of Music      | 203 | Brittany Harris  |
| 103 | The Sound of Music      | 205 | Chris Jackson    |
| 104 | E.T.                    | 208 | Ashley White     |
| 104 | E.T.                    | 205 | Chris Jackson    |
| 106 | Snow White              | 202 | Daniel Lewis     |
| 106 | Snow White              | 206 | Elizabeth Thomas |
| 107 | Avatar                  | 206 | Elizabeth Thomas |
| 107 | Avatar                  | 207 | James Cameron    |
| 108 | Raiders of the Lost Ark | 205 | Chris Jackson    |
| 108 | Raiders of the Lost Ark | 203 | Brittany Harris  |
+-----+-------------------------+-----+------------------+
15.
For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

select r.name,m.title,min(ra.stars) from movie m join rating ra on m.mid =ra.mid join reviewer r on r.rid = ra.rid group by (m.title);
+------------------+-------------------------+---------------+
| name             | title                   | min(ra.stars) |
+------------------+-------------------------+---------------+
| Sarah Martinez   | Gone with the Wind      |             2 |
| Daniel Lewis     | Snow White              |             4 |
| Brittany Harris  | The Sound of Music      |             2 |
| Brittany Harris  | Raiders of the Lost Ark |             2 |
| Chris Jackson    | E.T.                    |             2 |
| Elizabeth Thomas | Avatar                  |             3 |
+------------------+-------------------------+---------------+
16.
List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

select m.title,avg(ra.stars)from movie m join rating ra on m.mid = ra.mid group by(title) order by (avg(ra.stars)),(m.title) ;
+-------------------------+---------------+
| title                   | avg(ra.stars) |
+-------------------------+---------------+
| E.T.                    |        2.5000 |
| The Sound of Music      |        2.5000 |
| Gone with the Wind      |        3.0000 |
| Raiders of the Lost Ark |        3.3333 |
| Avatar                  |        4.0000 |
| Snow White              |        4.5000 |
+-------------------------+---------------+
17.
Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

select r.name,count(ra.rid) from rating ra join reviewer r on r.rid = ra.rid group by (ra.rid) having count(ra.rid)>=3;
+-----------------+---------------+
| name            | count(ra.rid) |
+-----------------+---------------+
| Brittany Harris |             3 |
| Chris Jackson   |             3 |
+-----------------+---------------+
18.
Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

select title,director from movie where director in (select director from movie group by (director) having count(director)>=2)order by (director),(title);
+-------------------------+------------------+
| title                   | director         |
+-------------------------+------------------+
| Avatar                  | James Cameron    |
| Titanic                 | James Cameron    |
| E.T.                    | Steven Spielberg |
| Raiders of the Lost Ark | Steven Spielberg |
+-------------------------+------------------+
19.
Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

(select m.title,avg(ra.stars) as a from movie m join rating ra on m.mid = ra.mid group by (m.title)) order by(avg(ra.stars)) desc limit 1;
+------------+--------+
| title      | a      |
+------------+--------+
| Snow White | 4.5000 |
+------------+--------+
20.
Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

select r1.title,r1.ran,r1.m1 from (select r.title,r.a as m1,dense_rank() over (order by r.a) as ran  from (select m.title,avg(ra.stars) as a from movie m join rating ra on m.mid = ra.mid group by (m.title))as r) as r1 where r1.ran = 1;
+--------------------+-----+--------+
| title              | ran | m1     |
+--------------------+-----+--------+
| The Sound of Music |   1 | 2.5000 |
| E.T.               |   1 | 2.5000 |
+--------------------+-----+--------+
				========================
select r1.title,r1.m1 from (select r.title,r.a as m1,dense_rank() over (order by r.a) as ran  from (select m.title,avg(ra.stars) as a from movie m join rating ra on m.mid = ra.mid group by (m.title))as r) as r1 where r1.ran = 1;
+--------------------+--------+
| title              | m1     |
+--------------------+--------+
| The Sound of Music | 2.5000 |
| E.T.               | 2.5000 |
+--------------------+--------+
				+++++++++++++++++++++++++++++
select m.title,avg(ra.stars) as aver from rating ra inner join movie m on m.mid=ra.mid group by m.title having aver>=(select avg(stars) from rating);
+-------------------------+--------+
| title                   | aver   |
+-------------------------+--------+
| Snow White              | 4.5000 |
| Raiders of the Lost Ark | 3.3333 |
| Avatar                  | 4.0000 |
+-------------------------+--------+

21.
Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

 select m.director,m.title,ra.stars,max(ra.stars) from rating ra join movie m on m.mid = ra.mid where m.director is not null group by m.director;
+------------------+-------------------------+-------+---------------+
| director         | title                   | stars | max(ra.stars) |
+------------------+-------------------------+-------+---------------+
| Victor Fleming   | Gone with the Wind      |     2 |             4 |
| Robert Wise      | The Sound of Music      |     2 |             3 |
| Steven Spielberg | Raiders of the Lost Ark |     4 |             4 |
| James Cameron    | Avatar                  |     3 |             5 |
+------------------+-------------------------+-------+---------------+

